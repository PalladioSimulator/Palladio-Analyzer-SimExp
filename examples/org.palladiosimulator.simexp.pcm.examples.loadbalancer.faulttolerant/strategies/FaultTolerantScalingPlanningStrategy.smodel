modelName = "FaultTolerantScalingPlanningStrategy";

const double lowerThreshold = 1.0;
const double upperThreshold = 2.0;
const string available = "available";
var double scalingFactor = 0.1; 
envvar string serverNode1: variableId = "_AiOj4AFHEe6baZPxrKywYw";	// entity name: GRV_StaticInstance_ServerNode1
envvar string serverNode2:variableId = "_QZ8DcAFHEe6baZPxrKywYw";	// entity name: GRV_StaticInstance_ServerNode2
probe double responseTime : monitorId = "_LQcqIMltEeSsG6YHnSxiuA"; // System Response Time : "Usage Scenario: overloadUsageScenario";


action scaleOut();
//action scaleOut(param double factor);
action scaleIn();
//action scaleIn(optimizable double[0.1, 0.2, 0.05] factor);
action nodeRecovery(param string node1, param string node2);

if ((serverNode1==available) && (serverNode2==available)) {
	if (responseTime >= upperThreshold) {
		scaleOut();
		 //scaleOut(factor=scalingFactor);
	}

	if (responseTime <= lowerThreshold) {
		scaleIn();	
	}
} else { 
	// node recovery implements logic of class 'FaultTolerantScalingNodeFailureRecoveryStrategy.handleStates'
	nodeRecovery(node1=serverNode1, node2=serverNode2);
}
