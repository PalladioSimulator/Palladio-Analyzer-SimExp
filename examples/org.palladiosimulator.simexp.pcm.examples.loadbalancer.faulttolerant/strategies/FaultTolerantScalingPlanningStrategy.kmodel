const float lowerThreshold = 1.0;
const float upperThreshold = 2.0;

envvariable bool isAvailableNode1 : staticid"_yaTfsAEpEeS7FKokKTKFow", dynamicid"_fhjfsdahfsh"; // ServerNode1
envvariable bool isAvailableNode2 : staticid"_yabTfsAEpEeS7FKokKTKFow", dynamicid"_ghjfsdahfsh"; // ServerNode2

probe float responseTime : "Usage Scenario: overloadUsageScenario";
//probe float responseTime2 : monitorid"_LQcqIMltEeSsG6YHnSxiuA"; // Usage Scenario: overloadUsageScenario

action scaleOut();
action scaleIn();
action nodeRecovery_1_1();
action nodeRecovery_1_0();
action nodeRecovery_0_1();

if (isAvailableNode1 && isAvailableNode2) {
	if (responseTime >= upperThreshold) {
		scaleOut();
	}

	if (responseTime <= lowerThreshold) {
		scaleIn();	
	}
} else {
	nodeRecovery();
	if (!isAvailableNode1 && !isAvailableNode2) {
		// if both nodes are down, then always recover node 1
		nodeRecovery_1_0()
	}
	if (isAvailableNode1 && !isAvailableNode2) {
		nodeRecovery_1_0()
	}
	if (!isAvailableNode1 && isAvailableNode2) {
		nodeRecovery_0_1()
	}
	if (isAvailableNode1 && isAvailableNode2) {
		nodeRecovery_1_1();
	}
}