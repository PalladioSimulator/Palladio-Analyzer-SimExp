/*
 * This simple QVTO SimuLizar reconfiguration rule increases the processing rate of all
 * resources in case the monitored mean response time is greater than 3.0 (seconds). 
 *
 */

/*
 * Two modeltypes are declared. The http NS URIs correspond to those used to register the 
 * Ecore models in the environment. Alternatively, a workspace metamodel may be used 
 * in conjunction with mappings defined in the project properties.
 */
modeltype PRM uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.2';
modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';
modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';

/*
 * The transformation signature declares that a PRM modeltype is required as input, while an PCM
 * modeltype is transformed inplace. The PRM modeltype is referenced as 'prm' throughout the 
 * transformation definition, while no name is needed for the output PCM modeltype. Note that OCL 
 * type and namespace notation are used in operational QVT (: and :: respectively).
 */
transformation nodeRecovery( in pcmAllocation : PCM_ALLOC ) {
	
	configuration property serverNode1 : String;							// node1 availability
	configuration property serverNode2 : String;							// node2 availability
							

	/**
	 * The main transformation.
	 * This is the entry point to the overall transformation.
	 */
	main() {
	
	log('Transformation rule [nodeRecovery] ...');
	if ((serverNode1 != "available") or (serverNode2 != "available")) {
		log('Start node recovery ...');
		if ((serverNode1.toString() = 'available') and (serverNode2.toString() != 'available')){
			log("serverNode1 : '" + serverNode1.toString() + "', serverNode2: '" + serverNode2.toString() + "'");
			var probBranch1 : Real = 1.0;
			var probBranch2 : Real = 0.0;
			pcmAllocation.rootObjects()[Allocation]->forAll(
								allocation : Allocation | 
								setBranchProbabilities(allocation.allocationContexts_Allocation, probBranch1, probBranch2)
							);
	 	};
	 	if ((serverNode1 = "available") and (serverNode2 = "available")){
			log("serverNode1 : '" + serverNode1.toString() + "', serverNode2: '" + serverNode2.toString() + "'");
			var probBranch1 : Real = 1.0;
			var probBranch2 : Real = 0.0;
			pcmAllocation.rootObjects()[Allocation]->forAll(
								allocation : Allocation | 
								setBranchProbabilities(allocation.allocationContexts_Allocation, probBranch1, probBranch2)
							);
	 	};
	 	if ((serverNode1 != "available") and (serverNode2 = "available")){
			log("serverNode1 : '" + serverNode1.toString() + "', serverNode2: '" + serverNode2.toString() + "'");
			var probBranch1 : Real = 0.0;
			var probBranch2 : Real = 1.0;
			pcmAllocation.rootObjects()[Allocation]->forAll(
								allocation : Allocation | 
								setBranchProbabilities(allocation.allocationContexts_Allocation, probBranch1, probBranch2)
							);
	 	};
	 	if ((serverNode1 != "available") and (serverNode2 != "available")){
			log("serverNode1 : '" + serverNode1.toString() + "', serverNode2: '" + serverNode2.toString() + "'");
			var probBranch1 : Real = 0.0;
			var probBranch2 : Real = 0.0;
			pcmAllocation.rootObjects()[Allocation]->forAll(
								allocation : Allocation | 
								setBranchProbabilities(allocation.allocationContexts_Allocation, probBranch1, probBranch2)
							);
	 	};	 	
	log('Node recovery DONE.');
	};

	log('Transformation rule [unsetBranchProbabilityNode1] DONE.');
	}
	
	
	/**
	 * branchProbabilityProcessing Processing.
	 */
	helper setBranchProbabilities(allocationContexts : Set(AllocationContext), in probBranch1 : Real, in probBranch2: Real) : Boolean {
	
		allocationContexts->forEach(allocation){

			if( allocation.assemblyContext_AllocationContext.id = "_6F6LYAEnEeS7FKokKTKFow" ) {
			//log('Found load balancer: AC_LoadBalancer');
				allocation.assemblyContext_AllocationContext.encapsulatedComponent__AssemblyContext.oclAsType(BasicComponent).serviceEffectSpecifications__BasicComponent->forEach(seff) {
					if(seff.oclIsTypeOf(ResourceDemandingSEFF)) {
						var branch1 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_ridTkAEoEeS7FKokKTKFow"); // entityName="delegateToServer1"
						branch1.branchProbability := probBranch1;
						log('Set branch1.branchProbability to ' + branch1.branchProbability.toString());
						var branch2 : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_tjFukAEoEeS7FKokKTKFow"); // entityName="delegateToServer2"
						branch2.branchProbability := probBranch2;
						log('Set branch2.branchProbability to ' + branch2.branchProbability.toString());
						var branchFailSave : ProbabilisticBranchTransition = seff.allSubobjects()[ProbabilisticBranchTransition]->any(id="_fm8UkQFdEe-xm__qsFXqOw"); // entityName="failSavee"
						branchFailSave.branchProbability := 0.0;
						log('Set branchFailSave.branchProbability to ' + branchFailSave.branchProbability.toString());
						return true;
					}
				}
			}
		};
		
		return false;
	}	
	
}
