/*
 * generated by Xtext 2.26.0
 */
package org.palladiosimulator.simexp.dsl.smodel.ui.outline;

import org.eclipse.emf.common.util.EList;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.palladiosimulator.simexp.dsl.smodel.smodel.Action;
import org.palladiosimulator.simexp.dsl.smodel.smodel.ActionCall;
import org.palladiosimulator.simexp.dsl.smodel.smodel.Constant;
import org.palladiosimulator.simexp.dsl.smodel.smodel.EnvVariable;
import org.palladiosimulator.simexp.dsl.smodel.smodel.IfStatement;
import org.palladiosimulator.simexp.dsl.smodel.smodel.Optimizable;
import org.palladiosimulator.simexp.dsl.smodel.smodel.Probe;
import org.palladiosimulator.simexp.dsl.smodel.smodel.Statement;
import org.palladiosimulator.simexp.dsl.smodel.smodel.Variable;
import org.palladiosimulator.simexp.dsl.smodel.smodel.VariableAssignment;

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
public class SmodelOutlineTreeProvider extends DefaultOutlineTreeProvider {
    protected boolean _isLeaf(Constant ele) {
        return true;
    }

    protected boolean _isLeaf(Variable ele) {
        return true;
    }

    protected boolean _isLeaf(EnvVariable ele) {
        return true;
    }

    protected boolean _isLeaf(Optimizable ele) {
        return true;
    }

    protected boolean _isLeaf(Probe ele) {
        return true;
    }

    protected boolean _isLeaf(Action ele) {
        return true;
    }

    protected boolean _isLeaf(ActionCall ele) {
        return true;
    }

    protected boolean _isLeaf(VariableAssignment ele) {
        return true;
    }

    protected void _createChildren(IOutlineNode parentNode, IfStatement ifStatement) {
        EList<Statement> thenStatements = ifStatement.getThenStatements();
        if (!thenStatements.isEmpty()) {
            TextNode thenNode = new TextNode(parentNode, (Image) null, "then", false);
            for (Statement element : thenStatements) {
                createNode(thenNode, element);
            }
        }

        EList<Statement> elseStatements = ifStatement.getElseStatements();
        if (!elseStatements.isEmpty()) {
            TextNode elseNode = new TextNode(parentNode, (Image) null, "else", false);
            for (Statement element : elseStatements) {
                createNode(elseNode, element);
            }
        }
    }

}
