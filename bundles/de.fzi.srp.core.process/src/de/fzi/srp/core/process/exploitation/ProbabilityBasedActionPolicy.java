package de.fzi.srp.core.process.exploitation;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import de.fzi.srp.core.model.markovmodel.markoventity.Action;
import de.fzi.srp.core.model.markovmodel.markoventity.MarkovModel;
import de.fzi.srp.core.model.markovmodel.markoventity.State;
import de.fzi.srp.core.model.markovmodel.markoventity.Transition;
import de.fzi.srp.core.process.access.MarkovModelAccessor;
import de.fzi.srp.core.process.exploration.RandomizedStrategy;
import de.fzi.srp.core.process.markovian.activity.Policy;

public class ProbabilityBasedActionPolicy implements Policy<Action<?>> {

	private final static String POLICY_NAME = "ProbabilityBasedActionSelection";
	
	private final Optional<MarkovModelAccessor> markovAccessor;
	
	public ProbabilityBasedActionPolicy(Optional<MarkovModel> markovModel) {
		if (markovModel.isPresent()) {
			this.markovAccessor = Optional.of(MarkovModelAccessor.of(markovModel.get()));
		} else {
			this.markovAccessor = Optional.empty();
		}
	}
	

	@Override
	public String getId() {
		return POLICY_NAME;
	}
	
	@Override
	public Action<?> select(State source, Set<Action<?>> options) {
		if (markovAccessor.isPresent()) {
			return selectAccordingToModel(source, options);
		}
		return selectRandomly(options);
	}


	private Action<?> selectAccordingToModel(State source, Set<Action<?>> options) {
		return new ProbabilityBasedTransitionPolicy().select(source, filterTransitions(source, options)).getLabel();
	}

	private Set<Transition> filterTransitions(State source, Set<Action<?>> options) {
		Set<Transition> results = new HashSet<>();
		for (Action<?> each : options) {
			//TODO exception handling
			Transition result = markovAccessor.get().findTransition(source, each)
													.orElseThrow(() -> new RuntimeException(""));
			results.add(result);
		}
		return results;
	}

	private Action<?> selectRandomly(Set<Action<?>> options) {
		return new RandomizedStrategy<Action<?>>().select(null, options);
	}
	
}
