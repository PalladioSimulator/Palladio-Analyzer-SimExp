/*
 * generated by Xtext 2.26.0
 */
package org.palladiosimulator.simexp.dsl.kmodel.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Action;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.ActionCall;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.ArgumentKeyValue;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Expression;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.KmodelPackage;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Parameter;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping on how and when
 * to use it.
 */
public class KmodelScopeProvider extends AbstractKmodelScopeProvider {

    @Override
    public IScope getScope(EObject context, EReference reference) {
        IScope scope = super.getScope(context, reference);

        if (context instanceof Expression) {
            if (reference == KmodelPackage.Literals.EXPRESSION__FIELD_REF) {
                return new FilteringScope(scope, field -> isBefore(field.getEObjectOrProxy(), context));
            }
        }

        if (context instanceof ActionCall) {
            if (reference == KmodelPackage.Literals.ACTION_CALL__ACTION_REF) {
                return new FilteringScope(scope, action -> isBefore(action.getEObjectOrProxy(), context));
            }
        }

        if (context instanceof ArgumentKeyValue) {
            if (reference == KmodelPackage.Literals.ARGUMENT_KEY_VALUE__PARAM_REF) {
                ActionCall actionCall = EcoreUtil2.getContainerOfType(context, ActionCall.class);
                Action action = actionCall.getActionRef();
                List<Parameter> parameters = EcoreUtil2.getAllContentsOfType(action, Parameter.class);
                return Scopes.scopeFor(parameters);
            }
        }

        return scope;
    }

    // Returns true iff 'objectA' was created before 'objectB'.
    private boolean isBefore(EObject objectA, EObject objectB) {
        // To avoid recursive definitions, if objectB is created within objectA, it is not
        // considered as created after objectA.
        if (EcoreUtil2.isAncestor(objectA, objectB)) {
            return false;
        }

        EObject root = EcoreUtil2.getRootContainer(objectA);
        List<EObject> contents = EcoreUtil2.eAllContentsAsList(root);

        // No need to check containment of objectA, as root is derived from it.
        if (!contents.contains(objectB)) {
            return true;
        }

        return contents.indexOf(objectA) < contents.indexOf(objectB);
    }
}
