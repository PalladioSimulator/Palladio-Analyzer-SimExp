/*
 * generated by Xtext 2.26.0
 */
package org.palladiosimulator.simexp.dsl.kmodel.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.KModel
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Statement
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Variable
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.DataType
import org.eclipse.xtext.testing.validation.ValidationTestHelper

@ExtendWith(InjectionExtension)
@InjectWith(KmodelInjectorProvider)
class KmodelParsingTest {
	@Inject
	ParseHelper<KModel> parseHelper
	
	@Inject 
	ValidationTestHelper validationTestHelper
	
	@Test
	def void singleIntegerTest() {
		val result = parseHelper.parse('''
			var int a;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		Assertions.assertEquals(result.elements.length, 1)
		val variable = (result.elements.head as Statement).^var as Variable
		Assertions.assertEquals(variable.dataType, DataType.INT)
		Assertions.assertEquals(variable.name, "a")
	}
	
	@Test
	def void singleFloatTest() {
		val result = parseHelper.parse('''
			var float a;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		Assertions.assertEquals(result.elements.length, 1)
		val variable = (result.elements.head as Statement).^var as Variable
		Assertions.assertEquals(variable.dataType, DataType.FLOAT)
		Assertions.assertEquals(variable.name, "a")
	}
	
	@Test
	def void singleBooleanTest() {
		val result = parseHelper.parse('''
			var bool a;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		Assertions.assertEquals(result.elements.length, 1)
		val variable = (result.elements.head as Statement).^var as Variable
		Assertions.assertEquals(variable.dataType, DataType.BOOL)
		Assertions.assertEquals(variable.name, "a")
	}
	
	@Test
	def void singleStringTest() {
		val result = parseHelper.parse('''
			var string a;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		Assertions.assertEquals(result.elements.length, 1)
		val variable = (result.elements.head as Statement).^var as Variable
		Assertions.assertEquals(variable.dataType, DataType.STRING)
		Assertions.assertEquals(variable.name, "a")
	}
	
	@Test
	def void doubleVariableTest() {
		val result = parseHelper.parse('''
			var int a;
			var bool b;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		Assertions.assertEquals(result.elements.length, 2)
		val iterator = result.elements.iterator
		
		val firstVariable = (iterator.next as Statement).^var as Variable
		Assertions.assertEquals(firstVariable.dataType, DataType.INT)
		Assertions.assertEquals(firstVariable.name, "a")
		
		val secondVariable = (iterator.next as Statement).^var as Variable
		Assertions.assertEquals(secondVariable.dataType, DataType.BOOL)
		Assertions.assertEquals(secondVariable.name, "b")
	}
	
	@Test
	def void noTypeTest() {
		val result = parseHelper.parse('''
			var a;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty)
	}
	
	@Test
	def void invalidTypeTest() {
		val result = parseHelper.parse('''
			var something a;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty)
	}
	
	@Test
	def void noNameTest() {
		val result = parseHelper.parse('''
			var float;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty)
	}
	
	@Test
	def void numberAsNameTest() {
		val result = parseHelper.parse('''
			var int 1;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty)
	}
	
	@Test
	def void symbolAsNameTest() {
		val result = parseHelper.parse('''
			var bool ?;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty)
	}
	
	@Test
	def void keywordAsNameTest() {
		val result = parseHelper.parse('''
			var string var;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty)
	}
	
	@Test
	def void typeAsNameTest() {
		val result = parseHelper.parse('''
			var int bool;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertFalse(errors.isEmpty)
	}
	
	@Test
	def void sameNameTest() {
		val result = parseHelper.parse('''
			var string a;
			var float a;
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
		
		val issues = validationTestHelper.validate(result)
		Assertions.assertEquals(issues.length, 2)
		
		Assertions.assertEquals(issues.get(0).message, "Duplicate Variable 'a'")
		Assertions.assertEquals(issues.get(0).lineNumber, 1)
		Assertions.assertEquals(issues.get(1).message, "Duplicate Variable 'a'")
		Assertions.assertEquals(issues.get(1).lineNumber, 2)
	}
}
