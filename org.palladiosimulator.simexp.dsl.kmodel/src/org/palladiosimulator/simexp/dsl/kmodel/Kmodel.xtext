grammar org.palladiosimulator.simexp.dsl.kmodel.Kmodel with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate kmodel "http://www.palladiosimulator.org/simexp/dsl/kmodel/Kmodel"

KModel:
	(fields+=Field)*
	(actions+=Action)*
	(statements+=IfStatement)*;
	
Field:
	Constant | Variable | Probe;

Constant returns Field:
	{Constant} 'const' dataType=DataType name=ID '=' value=Expression ';';
	
Variable returns Field:
	{Variable} 'var' dataType=DataType name=ID ';';	

Probe returns Field:
	{Probe} 'probe' id=ID 'as' dataType=DataType name=ID ';';
	
Action:
	{Action} 'action' name=ID '(' parameter=Parameter ')' ';';
	
Parameter: paramType=ParamType dataType=DataType name=ID;

Statement:
	ActionCall | IfStatement;

ActionCall returns Statement:
	actionRef=[Action] '(' argument=Expression ')' ';';
	
IfStatement returns Statement: 
	'if' '(' condition=Expression ')' '{' (statements+=Statement)* '}';

Expression:
    ConjunctionExpr =>({Expression.left=current} op=Disjunction right=ConjunctionExpr)*;
    
ConjunctionExpr returns Expression:
	EqualityExpr =>({ConjunctionExpr.left=current} op=Conjunction right=EqualityExpr)*;
	
EqualityExpr returns Expression:
	NegationExpr =>({EqualityExpr.left=current} op=Equality right=NegationExpr)*;
	
NegationExpr returns Expression:
	{NegationExpr} (op=Negation)? =>left=ComparisonExpr;	
	
ComparisonExpr returns Expression:
	AdditionExpr =>({ComparisonExpr.left=current} op=Comparison right=AdditionExpr)?;	
	
AdditionExpr returns Expression:
	AdditiveInversionExpr =>({AdditionExpr.left=current} op=Addition right=MultiplicationExpr)*;
	
AdditiveInversionExpr returns Expression:
	{AdditiveInversionExpr} (op=Addition)? =>left=MultiplicationExpr;

MultiplicationExpr returns Expression:
	Term =>({MultiplicationExpr.left=current} op=Multiplication right=Term)*;			

Term returns Expression: 
	fieldRef=[Field] | literal=Literal | '(' expr=Expression ')';	

Literal returns Expression: 
	  {BoolLiteral} value=BOOL
	| {IntLiteral} value=INT 
	| {FloatLiteral} value=FLOAT
	| {StringLiteral} value=STRING;

enum DataType: BOOL = 'bool' | INT = 'int' | FLOAT = 'float' | STRING = 'string';

enum ParamType: PARAMETER = 'param' | VARIABLE = 'var';

enum Disjunction returns Operation: NULL | OR = '||';
enum Conjunction returns Operation: NULL | AND = '&&';
enum Equality returns Operation: NULL | EQUAL = '==' | UNEQUAL = '!=';
enum Negation returns Operation: NULL | NOT = '!';
enum Comparison returns Operation: NULL | SMALLER = '<' | SMALLER_OR_EQUAL = '<=' | GREATER_OR_EQUAL = '>=' | GREATER = '>';
enum Addition returns Operation: NULL | PLUS = '+' | MINUS = '-';
enum Multiplication returns Operation: NULL | MULTIPLY = '*' | DIVIDE = '/';

terminal BOOL returns ecore::EBoolean: 'true' | 'false';

terminal FLOAT returns ecore::EFloat: INT '.' INT;