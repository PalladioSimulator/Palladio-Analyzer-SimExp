/*
 * generated by Xtext 2.26.0
 */
package org.palladiosimulator.simexp.dsl.kmodel.validation;

import org.eclipse.xtext.validation.Check;
import java.util.List;
import java.util.StringJoiner;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Action;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.ActionCall;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.ArgumentKeyValue;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Array;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.BoolLiteral;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Bounds;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Constant;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.DataType;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Expression;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Field;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.FloatLiteral;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.IfStatement;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.IntLiteral;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.KmodelPackage;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Literal;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Operation;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Parameter;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Probe;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Range;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.RangeWithGrowth;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.StringLiteral;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Variable;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class KmodelValidator extends AbstractKmodelValidator {
	
	@Check
	public void checkConstant(Constant constant) {
		Expression value = constant.getValue();
		
		// Check if the expression assigned to the constant contains a variable or probe reference.
		if (containsNonConstantFieldReference(value)) {
			error("Cannot assign an expression containing a variable value to a constant.",
					KmodelPackage.Literals.CONSTANT__VALUE);
			return;
		}
		
		DataType constantDataType = constant.getDataType();
		DataType valueDataType = getDataType(value);
		
		if (valueDataType == DataType.NULL) {
			return;
		}
			
		if (!constantDataType.equals(valueDataType)) {
			if (constantDataType == DataType.FLOAT && valueDataType == DataType.INT) {
				return;
			}
				
			error("Expected a value of type '"
					+ constantDataType + "', got '" + valueDataType + "' instead.",
					KmodelPackage.Literals.CONSTANT__VALUE);
		}
	}
	
	@Check
	public void checkVariable(Variable variable) {
		DataType dataType = variable.getDataType();
		Bounds values = variable.getValues();
		
		if (!isNumberType(dataType) && (values instanceof Range || values instanceof RangeWithGrowth)) {
			error("Cannot assign a value range to a variable of the type '" + dataType + "'.",
					KmodelPackage.Literals.VARIABLE__VALUES);
		}
	}
	
	@Check
	public void checkValueArray(Array array) {
		DataType dataType = getContainerDataType(array);
		if (dataType == DataType.NULL) {
			return;
		}
		
		List<Literal> values = array.getValues();
		
		StringJoiner wrongValueTypes = new StringJoiner(", ");
		
		for (int i = 0; i < values.size(); i++) {
			Literal value = values.get(i);
			
			DataType valueType = getDataType(value);
			if (valueType == DataType.NULL) {
				return;
			}
			
			if (valueType != dataType) {
				if (dataType == DataType.FLOAT && valueType == DataType.INT) {
					continue;
				}
				
				wrongValueTypes.add(valueType.toString());
			}
		}
		
		if (wrongValueTypes.length() != 0) {
			error("Expected only values of type '" + dataType + "', got {" + wrongValueTypes + "} instead.",
					KmodelPackage.Literals.ARRAY__VALUES);
		}
	}
	
	@Check
	public void checkValueRange(Range range) {
		DataType dataType = getContainerDataType(range);
		if (dataType == DataType.NULL) {
			return;
		}
		
		Literal startValue = range.getStartValue();
		Literal endValue = range.getEndValue();
		Literal stepSize = range.getStepSize();
		
		DataType startValueType = getDataType(startValue);
		DataType endValueType = getDataType(endValue);
		DataType stepSizeType = getDataType(stepSize);
		
		if (dataType == DataType.NULL || startValueType == DataType.NULL 
				|| endValueType == DataType.NULL || stepSizeType == DataType.NULL) {
			return;
		}
		
		if (dataType == DataType.INT && startValueType == DataType.FLOAT || !isNumberType(startValueType)) {
			error("Expected a value of type '" + DataType.INT + "' or '" + DataType.FLOAT + "', got '" + startValueType + "' instead.",
					KmodelPackage.Literals.RANGE__START_VALUE);
		}
		
		if (endValueType != DataType.INT && endValueType != DataType.FLOAT || !isNumberType(endValueType)) {
			error("Expected a value of type '" + DataType.INT + "' or '" + DataType.FLOAT + "', got '" + endValueType + "' instead.",
					KmodelPackage.Literals.RANGE__END_VALUE);
		}
		
		if (stepSizeType != DataType.INT && stepSizeType != DataType.FLOAT || !isNumberType(stepSizeType)) {
			error("Expected a value of type '" + DataType.INT + "' or '" + DataType.FLOAT + "', got '" + stepSizeType + "' instead.",
					KmodelPackage.Literals.RANGE__STEP_SIZE);
		}
	}
	
	@Check
	public void checkValueRangeWithGrowth(RangeWithGrowth range) {
		Literal startValue = range.getStartValue();
		Literal endValue = range.getEndValue();
		Literal numSteps = range.getNumSteps();
		
		DataType startValueType = getDataType(startValue);
		DataType endValueType = getDataType(endValue);
		DataType numStepsType = getDataType(numSteps);
		
		if (startValueType == DataType.NULL || endValueType == DataType.NULL || numStepsType == DataType.NULL) {
			return;
		}
		
		if (startValueType != DataType.INT && startValueType != DataType.FLOAT || !isNumberType(startValueType)) {
			error("Expected a value of type '" + DataType.INT + "' or '" + DataType.FLOAT + "', got '" + startValueType + "' instead.",
					KmodelPackage.Literals.RANGE_WITH_GROWTH__START_VALUE);
		}
		
		if (endValueType != DataType.INT && endValueType != DataType.FLOAT || !isNumberType(endValueType)) {
			error("Expected a value of type '" + DataType.INT + "' or '" + DataType.FLOAT + "', got '" + endValueType + "' instead.",
					KmodelPackage.Literals.RANGE_WITH_GROWTH__END_VALUE);
		}
		
		if (numStepsType != DataType.INT) {
			error("Expected a value of type '" + DataType.INT  + "', got '" + numStepsType + "' instead.",
					KmodelPackage.Literals.RANGE_WITH_GROWTH__NUM_STEPS);
		}
	}
	
	@Check
	public void checkCondition(IfStatement ifStatement) {
		Expression condition = ifStatement.getCondition();

		DataType conditionType = getDataType(condition);
		
		if (conditionType == DataType.NULL) {
			return;
		}
			
		if (!conditionType.equals(DataType.BOOL)) {
			error("Expected a value of type '" + DataType.BOOL 
					+ "', got '" + conditionType + "' instead.",
					KmodelPackage.Literals.IF_STATEMENT__CONDITION);
		}
	}
	
	@Check
	public void checkArguments(ActionCall actionCall) {
		Action action = actionCall.getActionRef();
		List<ArgumentKeyValue> arguments = actionCall.getArguments();
		List<Field> parameters = action.getParameterList().getParameters();
		
		// Check if number of arguments match number parameters for which an argument can be accepted.
		if (arguments.size() != parameters.size()) {
			error("Expected " + parameters.size() + " arguments, got " + arguments.size() + ".", 
					KmodelPackage.Literals.ACTION_CALL__ARGUMENTS);
			return;
		}
		
		// Check if arguments are provided in correct order.
		for (int i = 0; i < arguments.size(); i++) {
			if (!parameters.contains(arguments.get(i).getParamRef())) {
				error("Arguments cannot be provided for variable parameters.", KmodelPackage.Literals.ACTION_CALL__ARGUMENTS);
				return;
			}
			
			if (!arguments.get(i).getParamRef().equals(parameters.get(i))) {
				error("Arguments must be provided in the order as declared.", KmodelPackage.Literals.ACTION_CALL__ARGUMENTS);
				return;
			}
		}
		
		// Check if argument types match the parameter types.
		String parameterTypes = parameters
				.stream()
				.map(param -> param.getDataType().toString())
				.collect(Collectors.joining(", ", "(", ")"));
		String argumentTypes = arguments
				.stream()
				.map(arg -> getDataType(arg.getArgument()).toString())
				.collect(Collectors.joining(", ", "(", ")"));
		
		if (argumentTypes.contains(DataType.NULL.toString())) {
			return;
		}
		
		if (!parameterTypes.equals(argumentTypes)) {
			error("Expected arguments of types " + parameterTypes + ", got " + argumentTypes + " instead.",
					KmodelPackage.Literals.ACTION_CALL__ARGUMENTS);
		}
	}
	
	@Check
	public void checkExpressions(Expression expression) {
		DataType leftDataType = getDataType(expression.getLeft());
		DataType rightDataType = getDataType(expression.getRight());
		
		Operation operation = expression.getOp();

		switch(operation) {
			case NULL:
				return;
					
			// Fallthrough, as those operations all need boolean arguments.	
			case OR:
			case AND:
			case NOT:	
				if (leftDataType != DataType.NULL && leftDataType != DataType.BOOL) {
					error("Expected a value of type '" + DataType.BOOL + "', got '" + leftDataType + "' instead.", 
							KmodelPackage.Literals.EXPRESSION__LEFT);
				}
				
				if (rightDataType != DataType.NULL && rightDataType != DataType.BOOL) {
					error("Expected a value of type '" + DataType.BOOL + "', got '" + rightDataType + "' instead.", 
							KmodelPackage.Literals.EXPRESSION__RIGHT);
				}
				return;
				
			case EQUAL:
			case UNEQUAL:
				if (leftDataType != DataType.NULL && !(isNumberType(leftDataType) && isNumberType(rightDataType)) && leftDataType != rightDataType) {
					error("Cannot compare the equality of a '"
							+ leftDataType + "' value with a '" + rightDataType + "' value.",
							KmodelPackage.Literals.EXPRESSION__LEFT);
					
					error("Cannot compare the equality of a '"
							+ leftDataType + "' value with a '" + rightDataType + "' value.",
							KmodelPackage.Literals.EXPRESSION__RIGHT);
				}
				return;
				
			// Fallthrough, as those operations all need number arguments.	
			case SMALLER:
			case SMALLER_OR_EQUAL:
			case GREATER_OR_EQUAL:
			case GREATER:
			case PLUS:
			case MINUS:
			case MULTIPLY:
			case DIVIDE:
				if (leftDataType != DataType.NULL && !isNumberType(leftDataType)) {
					error("Expected a value of type '" + DataType.INT + "' or '" + DataType.FLOAT + "', got '" + leftDataType + "' instead.",
							KmodelPackage.Literals.EXPRESSION__LEFT);
				}
				
				if (rightDataType != DataType.NULL && !isNumberType(rightDataType)) {
					error("Expected a value of type '" + DataType.INT + "' or '" + DataType.FLOAT + "', got '" + rightDataType + "' instead.",
							KmodelPackage.Literals.EXPRESSION__RIGHT);
				}
		}
	}
	
	/*
	 * Returns the datatype of an expression
	 */
	private DataType getDataType(Expression expression) {
		if (expression == null) {
			return DataType.NULL;
		}
		
		Operation operation = expression.getOp();
		switch (operation) {
			case NULL:
				break;
			
			// Fallthrough, all cases are boolean.
			case OR:
			case AND:
			case EQUAL:
			case UNEQUAL:
			case NOT:	
			case SMALLER:
			case SMALLER_OR_EQUAL:
			case GREATER_OR_EQUAL:
			case GREATER:	
				return DataType.BOOL;
			
			// Fallthrough, all cases are either int or float.
			case PLUS:
			case MINUS:
			case MULTIPLY:
				DataType leftDataType = getDataType(expression.getLeft());
				DataType rightDataType = getDataType(expression.getRight());
				
				if (leftDataType == DataType.FLOAT || rightDataType == DataType.FLOAT) {
					return DataType.FLOAT;
				} else {
				return DataType.INT;
				}
				
			// Division returns always a float value.	
			case DIVIDE:
				return DataType.FLOAT;
				
			default: 
				break;	
		}
		
		Expression left = expression.getLeft();
		if (left != null) {
			return getDataType(left);
		}
		
		Literal literal = expression.getLiteral();
		if (literal != null) {
			return getDataType(literal);
		}
		
		Field fieldRef = expression.getFieldRef();
		return fieldRef != null ? fieldRef.getDataType() : DataType.NULL;
	}
	
	private DataType getDataType(Literal literal) {
		if (literal == null) {
			return DataType.NULL;
		}
		
		if (literal instanceof BoolLiteral) {
			return DataType.BOOL;
			
		} else if (literal instanceof IntLiteral) {
			return DataType.INT;
			
		} else if (literal instanceof FloatLiteral) {
			return DataType.FLOAT;
			
		} else if (literal instanceof StringLiteral) {
			return DataType.STRING;
		}
		
		return null;
	}
	
	public boolean isNumberType(DataType type) {
		return type == DataType.INT || type == DataType.FLOAT;
	}
	
	/*
	 * Returns true iff the expression contains a field reference to a non-constant value.
	 */
	private boolean containsNonConstantFieldReference(Expression expression) {
		if (expression == null) {
			return false;
		}
		
		Expression leftExpr = expression.getLeft();
		Expression rightExpr = expression.getRight();
		if (leftExpr != null) {
			if (rightExpr != null) {
				return containsNonConstantFieldReference(leftExpr) 
						|| containsNonConstantFieldReference(rightExpr);
			}
			
			return containsNonConstantFieldReference(leftExpr);
		}
		
		Field field = expression.getFieldRef();
		return field != null && (field instanceof Variable || field instanceof Probe);
	}
	
	private DataType getContainerDataType(EObject object) {
		EObject container = object.eContainer();
		
		if (container == null) {
			return DataType.NULL;
		}
		
		if (container instanceof Field) {
			return ((Field) container).getDataType();
		}
		
		if (container instanceof Parameter) {
			return ((Parameter) container).getDataType();
		}
		
		return DataType.NULL;
	}
}
