/*
 * generated by Xtext 2.26.0
 */
package org.palladiosimulator.simexp.dsl.kmodel.validation;

import org.eclipse.xtext.validation.Check;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Action;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.BoolConstant;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.DataType;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Expression;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.FloatConstant;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.IntConstant;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.KmodelPackage;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Statement;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.StringConstant;
import org.palladiosimulator.simexp.dsl.kmodel.kmodel.Variable;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class KmodelValidator extends AbstractKmodelValidator {
	
	@Check
	public void checkConditionType(Statement statement) {
		Expression condition = statement.getCondition();
		
		if (condition != null) {
			DataType conditionType = getDataType(condition);
			
			if (!conditionType.equals(DataType.BOOL)) {
				error("The condition must be of the type " + DataType.BOOL 
						+ ". Got " + conditionType + " instead.",
						KmodelPackage.Literals.STATEMENT__CONDITION);
			}
		}
	}
	
	@Check
	public void checkArgumentType(Statement statement) {
		Action action = statement.getAction();
		Expression argument = statement.getArgument();
		
		if (action != null && argument != null) {
			DataType parameterType = action.getParameter().getDataType();
			DataType argumentType = getDataType(argument);
			
			if (!parameterType.equals(argumentType)) {
				error("Expected an argument of the type "
						+ parameterType + ". Got " + argumentType + " instead.",
						KmodelPackage.Literals.STATEMENT__ARGUMENT);
			}
		}
	}
	
	private DataType getDataType(Expression expression) {
		Variable variable = expression.getVariable();
		Expression constant = expression.getConstant();
		
		if (variable != null) {
			return variable.getDataType();
			
		} else if (constant != null) {
			if (constant instanceof BoolConstant) {
				return DataType.BOOL;
				
			} else if (constant instanceof IntConstant) {
				return DataType.INT;
				
			} else if (constant instanceof FloatConstant) {
				return DataType.FLOAT;
				
			} else if (constant instanceof StringConstant) {
				return DataType.STRING;
			}
		}
		
		return null;
	}
}
