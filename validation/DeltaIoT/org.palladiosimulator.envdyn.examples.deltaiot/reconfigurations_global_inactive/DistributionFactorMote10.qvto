/*
 * This simple QVTO SimuLizar reconfiguration rule to decrease the distribution
 *
 */

/*
 * Two modeltypes are declared. The http NS URIs correspond to those used to register the 
 * Ecore models in the environment. Alternatively, a workspace metamodel may be used 
 * in conjunction with mappings defined in the project properties.
 */
//modeltype RUNTIMEMEASUREMENT uses 'http://simulizar.palladiosimulator.org/RuntimeMeasurement/1.0';
//modeltype PCM_ALLOC uses 'http://palladiosimulator.org/PalladioComponentModel/Allocation/5.2';
modeltype PCM_REP uses 'http://palladiosimulator.org/PalladioComponentModel/Repository/5.2';
modeltype PCM_SEFF uses 'http://palladiosimulator.org/PalladioComponentModel/SEFF/5.2';
//modeltype PCM_SYS uses 'http://palladiosimulator.org/PalladioComponentModel/System/5.2';
//modeltype PCM_RES_ENV uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceEnvironment/5.2';
//modeltype PCM_RES_TYPE uses 'http://palladiosimulator.org/PalladioComponentModel/ResourceType/5.2';
//modeltype PCM_USAGE uses 'http://palladiosimulator.org/PalladioComponentModel/UsageModel/5.2';
//modeltype PCM_FEATURE_CONF uses 'http://sdq.ipd.uka.de/FeatureConfig/2.0';
//modeltype PCM_FEATURE_MOD uses 'http://sdq.ipd.uka.de/FeatureModel/2.0';
modeltype PCM_CORE uses 'http://palladiosimulator.org/PalladioComponentModel/Core/5.2';
modeltype PCM_COMP uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Composition/5.2';
modeltype PCM_ENTITY uses 'http://palladiosimulator.org/PalladioComponentModel/Core/Entity/5.2';
//modeltype PCM_PARAM uses 'http://palladiosimulator.org/PalladioComponentModel/Parameter/5.2';
//modeltype PCM_STOEX uses 'http://sdq.ipd.uka.de/StochasticExpressions/2.2';
modeltype PCM_DIS_FACTOR uses 'http://palladiosimulator.org/reconfigurationparams/1.0';

transformation adaptDistributionFactorOfMote10(inout pcmRepository : PCM_REP, in distFactorRepo : PCM_DIS_FACTOR) {

	/**
	 * The main transformation.
	 * This is the entry point to the overall transformation.
	 */
	main() {
	
		log('Start to adapt distribution factor of mote 10.');
		
		assert fatal(pcmRepository.rootObjects()[Repository].allSubobjects()[BasicComponent]->exists(entityName= "DualTransmitter1"));
		
		var transmitter : BasicComponent := pcmRepository.rootObjects()[Repository]
														 .allSubobjects()[BasicComponent]->any(entityName= "DualTransmitter1");
		distribute(transmitter);
						 								  
	}
	
	/**
	 * Distribution factor adjustement.
	 */
	helper distribute(transmitter : BasicComponent) {
	
		log('Start to adjust distribution factor of ' +  transmitter.entityName);
		
		var distFactor : DistributionFactor := distFactorRepo.rootObjects()[DeltaIoTReconfigurationParamRepository]
															 .allSubobjects()[DistributionFactor]->any(appliedComponent.entityName = transmitter.entityName);
		
		var branch10To6 : ProbabilisticBranchTransition := transmitter.serviceEffectSpecifications__BasicComponent
									 								  .allSubobjects()[ProbabilisticBranchTransition]->any(entityName="TransmitToMote6");
		var factorValue10To6 : DistributionFactorValue := distFactor.factorValues->any(appliedBranch.entityName = branch10To6.entityName);
		branch10To6.branchProbability := factorValue10To6.value;
		
		var branch10To5 : ProbabilisticBranchTransition := transmitter.serviceEffectSpecifications__BasicComponent
									 								  .allSubobjects()[ProbabilisticBranchTransition]->any(entityName="TransmitToMote5");
		var factorValue10To5 : DistributionFactorValue := distFactor.factorValues->any(appliedBranch.entityName = branch10To5.entityName);
		branch10To5.branchProbability := factorValue10To5.value;	
				
	}
	
}