diff --git a/mypatch.patch b/mypatch.patch
index 732d4e98..e69de29b 100644
--- a/mypatch.patch
+++ b/mypatch.patch
@@ -1,118 +0,0 @@
-diff --git a/bundles/org.palladiosimulator.simexp.dsl.ea.optimizer/src/main/java/org/palladiosimulator/simexp/dsl/ea/optimizer/representation/SmodelBitChromosome.java b/bundles/org.palladiosimulator.simexp.dsl.ea.optimizer/src/main/java/org/palladiosimulator/simexp/dsl/ea/optimizer/representation/SmodelBitChromosome.java
-index fa5fea85..38ccbfd2 100644
---- a/bundles/org.palladiosimulator.simexp.dsl.ea.optimizer/src/main/java/org/palladiosimulator/simexp/dsl/ea/optimizer/representation/SmodelBitChromosome.java
-+++ b/bundles/org.palladiosimulator.simexp.dsl.ea.optimizer/src/main/java/org/palladiosimulator/simexp/dsl/ea/optimizer/representation/SmodelBitChromosome.java
-@@ -2,8 +2,6 @@ package org.palladiosimulator.simexp.dsl.ea.optimizer.representation;
- 
- import static java.util.Objects.requireNonNull;
- 
--import java.util.BitSet;
--
- import org.palladiosimulator.simexp.dsl.smodel.smodel.Optimizable;
- 
- import io.jenetics.BitChromosome;
-@@ -19,7 +17,7 @@ public class SmodelBitChromosome extends BitChromosome {
- 
-     private int numOfValues;
- 
--    private SmodelBitChromosome(Optimizable optimizable, byte[] bits, int length, int numOfValues) {
-+    protected SmodelBitChromosome(Optimizable optimizable, byte[] bits, int length, int numOfValues) {
-         super(bits, 0, length);
-         this.optimizable = optimizable;
-         this.numOfValues = numOfValues;
-@@ -82,12 +80,8 @@ public class SmodelBitChromosome extends BitChromosome {
-         int initialValue = RandomRegistry.random()
-             .nextInt(numOfValues);
- 
--        BitSet naiveBitSet = BitSet.valueOf(new long[] { initialValue });
--        for (int i = 0; i < naiveBitSet.length(); i++) {
--            if (naiveBitSet.get(i)) {
--                smodelBitset.set(i);
--            }
--        }
-+        smodelBitset.fromInt(initialValue);
-+
-         return of(smodelBitset, optimizable, numOfValues);
- //        throw new RuntimeException("not supported");
-     }
-diff --git a/bundles/org.palladiosimulator.simexp.dsl.ea.optimizer/src/main/java/org/palladiosimulator/simexp/dsl/ea/optimizer/representation/SmodelBitset.java b/bundles/org.palladiosimulator.simexp.dsl.ea.optimizer/src/main/java/org/palladiosimulator/simexp/dsl/ea/optimizer/representation/SmodelBitset.java
-index 37e30ee3..beec26c2 100644
---- a/bundles/org.palladiosimulator.simexp.dsl.ea.optimizer/src/main/java/org/palladiosimulator/simexp/dsl/ea/optimizer/representation/SmodelBitset.java
-+++ b/bundles/org.palladiosimulator.simexp.dsl.ea.optimizer/src/main/java/org/palladiosimulator/simexp/dsl/ea/optimizer/representation/SmodelBitset.java
-@@ -1,5 +1,7 @@
- package org.palladiosimulator.simexp.dsl.ea.optimizer.representation;
- 
-+import java.util.BitSet;
-+
- public class SmodelBitset extends FixedSizeBitSet {
-     private static final long serialVersionUID = 1L;
- 
-@@ -14,4 +16,16 @@ public class SmodelBitset extends FixedSizeBitSet {
-         }
-         return value;
-     }
-+
-+    public void fromInt(int value) {
-+        BitSet naiveBitSet = BitSet.valueOf(new long[] { value });
-+        if (naiveBitSet.length() > getNbits()) {
-+            throw new RuntimeException("Given value needs more bits to encode than this bitset has");
-+        }
-+        for (int i = 0; i < naiveBitSet.length(); i++) {
-+            if (naiveBitSet.get(i)) {
-+                set(i);
-+            }
-+        }
-+    }
- }
-diff --git a/bundles/org.palladiosimulator.simexp.dsl.ea.optimizer/src/main/java/org/palladiosimulator/simexp/dsl/ea/optimizer/smodel/OptimizableNormalizer.java b/bundles/org.palladiosimulator.simexp.dsl.ea.optimizer/src/main/java/org/palladiosimulator/simexp/dsl/ea/optimizer/smodel/OptimizableNormalizer.java
-index cd3a85da..ebc04d27 100644
---- a/bundles/org.palladiosimulator.simexp.dsl.ea.optimizer/src/main/java/org/palladiosimulator/simexp/dsl/ea/optimizer/smodel/OptimizableNormalizer.java
-+++ b/bundles/org.palladiosimulator.simexp.dsl.ea.optimizer/src/main/java/org/palladiosimulator/simexp/dsl/ea/optimizer/smodel/OptimizableNormalizer.java
-@@ -9,6 +9,7 @@ import org.palladiosimulator.simexp.dsl.ea.api.IEAFitnessEvaluator.OptimizableVa
- import org.palladiosimulator.simexp.dsl.ea.optimizer.impl.OptimizableProcessingException;
- import org.palladiosimulator.simexp.dsl.ea.optimizer.representation.SmodelBitChromosome;
- import org.palladiosimulator.simexp.dsl.ea.optimizer.representation.SmodelBitset;
-+import org.palladiosimulator.simexp.dsl.ea.optimizer.representation.SmodelGrayBitset;
- import org.palladiosimulator.simexp.dsl.smodel.api.IExpressionCalculator;
- import org.palladiosimulator.simexp.dsl.smodel.smodel.Bounds;
- import org.palladiosimulator.simexp.dsl.smodel.smodel.DataType;
-@@ -36,8 +37,8 @@ public class OptimizableNormalizer {
-         if (bounds instanceof SetBounds setBounds) {
-             int minLength = powerUtil.minBitSizeForPower(setBounds.getValues()
-                 .size());
--            return SmodelBitChromosome.of(new SmodelBitset(minLength), optimizable, setBounds.getValues()
--                .size());
-+            return toNormalizedSet(optimizable, setBounds.getValues()
-+                .size(), minLength);
-         }
- 
-         if (bounds instanceof RangeBounds rangeBounds) {
-@@ -55,6 +56,10 @@ public class OptimizableNormalizer {
-         throw new RuntimeException("invalid bounds: " + bounds);
-     }
- 
-+    protected SmodelBitChromosome toNormalizedSet(Optimizable optimizable, int boundsSize, int minLength) {
-+        return SmodelBitChromosome.of(new SmodelBitset(minLength), optimizable, boundsSize);
-+    }
-+
-     private SmodelBitChromosome toNormalizedRangeInt(Optimizable optimizable, RangeBounds rangeBounds) {
-         int startValue = expressionCalculator.calculateInteger(rangeBounds.getStartValue());
-         int endValue = expressionCalculator.calculateInteger(rangeBounds.getEndValue());
-@@ -62,7 +67,7 @@ public class OptimizableNormalizer {
- 
-         int power = (endValue - startValue) / stepSize;
-         int minLength = powerUtil.minBitSizeForPower(power);
--        return SmodelBitChromosome.of(new SmodelBitset(minLength), optimizable, power);
-+        return toNormalizedSet(optimizable, power, minLength);
-     }
- 
-     private SmodelBitChromosome toNormalizedRangeDouble(Optimizable optimizable, RangeBounds rangeBounds) {
-@@ -72,7 +77,7 @@ public class OptimizableNormalizer {
- 
-         int power = (int) Math.floor((endValue - startValue) / stepSize);
-         int minLength = powerUtil.minBitSizeForPower(power);
--        return SmodelBitChromosome.of(new SmodelBitset(minLength), optimizable, power);
-+        return toNormalizedSet(optimizable, power, minLength);
-     }
- 
-     // TODO add sets
